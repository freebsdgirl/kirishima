digraph Microservices {
  /* Force‑directed layout: neato or sfdp are your friends */
  layout=sfdp;       /* or use sfdp for bigger graphs */
  overlap=false;      /* prevent nodes from colliding */
  splines=true;       /* smooth, curved edges */

  /* Global node styling */
  node [
    shape=box,
    style="filled,rounded",
    fillcolor=lightblue,
    fontcolor="#080537"
  ];

  /* Optional: give heavier “gravity” to high‑degree nodes */
  edge [
    weight=2         /* boost spring strength */
  ];

  /* API endpoints */
  subgraph cluster_api {
    label="API endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightyellow];
    "API: POST /completions"
    "API: POST /v1/completions"
    "API: POST /chat/completions"
    "API: POST /v1/chat/completions"
    "API: GET /models/{model_id}"
    "API: GET /v1/models/{model_id}"
    "API: GET /models"
    "API: GET /v1/models"
  }

  /* BRAIN endpoints */
  subgraph cluster_brain {
    label="BRAIN endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightgreen];
    "BRAIN: POST /mode/{mode}"
    "BRAIN: GET /mode"
    "BRAIN: POST /scheduler/callback"
    "BRAIN: POST /scheduler/job"
    "BRAIN: GET /scheduler/job"
    "BRAIN: DELETE /scheduler/job/{job_id}"
    "BRAIN: POST /memory"
    "BRAIN: DELETE /memory"
    "BRAIN: GET /memory"
    "BRAIN: GET /memory/semantic"
    "BRAIN: POST /api/multiturn"
    "BRAIN: POST /message/single/incoming"
    "BRAIN: GET /models"
    "BRAIN: GET /model/{model_name}"
    "BRAIN: POST /embedding"
    "BRAIN: POST /discord/message/incoming"
    "BRAIN: POST /summary/user"
    "BRAIN: POST /summary/user/combined"
  }

  /* CHROMADB endpoints */
  subgraph cluster_chromadb {
    label="CHROMADB endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightpink];
    "CHROMADB: POST /embedding"
    "CHROMADB: POST /memory"
    "CHROMADB: DELETE /memory/{memory_id}"
    "CHROMADB: PUT /memory/{memory_id}"
    "CHROMADB: PATCH /memory/{memory_id}"
    "CHROMADB: GET /memory/id/{memory_id}"
    "CHROMADB: GET /memory"
    "CHROMADB: GET /memory/search"
    "CHROMADB: GET /memory/semantic"

    // Added summary endpoints
    "CHROMADB: POST /summary"
    "CHROMADB: GET /summary/{user_id}"
    "CHROMADB: GET /summary/{user_id}/{summary_type}"
    "CHROMADB: DELETE /summary/{summary_id}"
  }

  /* CONTACTS endpoints */
  subgraph cluster_contacts {
    label="CONTACTS endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightcoral];
    "CONTACTS: POST /contact"
    "CONTACTS: GET /contacts"
    "CONTACTS: GET /contact/{contact_id}"
    "CONTACTS: GET /search"
    "CONTACTS: PUT /contact/{contact_id}"
    "CONTACTS: DELETE /contact/{contact_id}"
    "CONTACTS: PATCH /contact/{contact_id}"
  }

  /* IMESSAGE endpoints */
  subgraph cluster_imessage {
    label="IMESSAGE endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightcyan];
    "IMESSAGE: POST /imessage/send"
    "IMESSAGE: POST /imessage/recv"
  }

  /* INTENTS endpoints */
  subgraph cluster_intents {
    label="INTENTS endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightgoldenrod];
    "INTENTS: POST /intents"
  }

  /* LEDGER endpoints */
  subgraph cluster_ledger {
    label="LEDGER endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor="#16b3b3"];
    "LEDGER: DELETE /ledger/user/{user_id}/before/{message_id}"
    "LEDGER: DELETE /ledger/user/{user_id}"
    "LEDGER: GET /ledger/user/{user_id}/messages"
    "LEDGER: GET /summaries/user/{user_id}"
    "LEDGER: DELETE /summaries/user/{user_id}"
    "LEDGER: POST /summaries/user/{user_id}/create"
    "LEDGER: POST /summaries/inactive"
    "LEDGER: POST /ledger/user/{user_id}/sync"
    "LEDGER: DELETE /ledger/conversation/{conversation_id}/before/{message_id}"
    "LEDGER: DELETE /ledger/conversation/{conversation_id}"
    "LEDGER: GET /ledger/conversation/{conversation_id}/messages"
    "LEDGER: GET /summaries/conversation/{conversation_id}"
    "LEDGER: POST /summaries/conversation/{conversation_id}/daily/create"
    "LEDGER: POST /summaries/conversation/{conversation_id}/weekly/create"
    "LEDGER: POST /summaries/conversation/{conversation_id}/monthly/create"
    "LEDGER: POST /ledger/conversation/{conversation_id}/sync"
  }

  
  /* PROXY endpoints */
  subgraph cluster_proxy {
    label="PROXY endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightsteelblue];
    "PROXY: GET /api/models"
    "PROXY: GET /api/models/{model_name}"
    "PROXY: POST /from/api/completions"
    "PROXY: POST /api/multiturn"
    "PROXY: POST /summary/user"
    "PROXY: POST /summary/user/combined"
    "PROXY: POST /from/imessage"
    "PROXY: POST /discord/dm"
    "PROXY: POST /queue/enqueue"
    "PROXY: GET /queue/status"
    "PROXY: GET /queue/task/{task_id}"
  }

  /* SCHEDULER endpoints */
  subgraph cluster_scheduler {
    label="SCHEDULER endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightseagreen];
    "SCHEDULER: POST /jobs/{job_id}/pause"
    "SCHEDULER: POST /jobs/{job_id}/resume"
    "SCHEDULER: POST /jobs"
    "SCHEDULER: DELETE /jobs/{job_id}"
    "SCHEDULER: GET /jobs"
  }

  /* Describe connections */
  /* API endpoint dependencies */
  "API: POST /v1/chat/completions"  -> "BRAIN: POST /message/multiturn/incoming"
  "API: POST /v1/completions"       -> "BRAIN: POST /message/single/incoming"
  "API: GET /v1/models/{model_id}"  -> "BRAIN: GET /model/{model_name}"
  "API: POST /completions"          -> "API: POST /v1/completions" [label="Redirect"]
  "API: POST /chat/completions"     -> "API: POST /v1/chat/completions" [label="Redirect"]
  "API: GET /models"                -> "API: GET /v1/models" [label="Redirect"]
  "API: GET /models/{model_id}"     -> "API: GET /v1/models/{model_id}" [label="Redirect"]
  "API: POST /v1/chat/completions"  -> "API: POST /v1/completions" [label="if '### Task'"]

  /* BRAIN endpoint dependencies */
  "BRAIN: POST /embedding"                    -> "CHROMADB: POST /embedding"
  "BRAIN: GET /models"                        -> "PROXY: GET /api/models"
  "BRAIN: GET /model/{model_name}"            -> "PROXY: GET /api/models/{model_name}"
  "BRAIN: POST /scheduler/job"                -> "SCHEDULER: POST /jobs"
  "BRAIN: GET /scheduler/job"                 -> "SCHEDULER: GET /jobs"
  "BRAIN: DELETE /scheduler/job/{job_id}"     -> "SCHEDULER: DELETE /jobs/{job_id}"
  "BRAIN: POST /message/incoming"             -> "CONTACTS: GET /search"
  "BRAIN: POST /message/incoming"             -> "CONTACTS: POST /contact" [label="if not found"]
  "BRAIN: POST /message/single/incoming"      -> "PROXY: POST /from/api/completions"
  "BRAIN: POST /message/multiturn/incoming"   -> "INTENTS: POST /intents"
  "BRAIN: POST /message/multiturn/incoming"   -> "PROXY: POST /from/api/multiturn"
  "BRAIN: POST /message/multiturn/incoming"   -> "INTENTS: POST /intents" [label="response post-processing"]
  "BRAIN: POST /message/multiturn/incoming"   -> "LEDGER: POST /ledger/user/{user_id}/sync"
  "BRAIN: POST /message/multiturn/incoming"   -> "LEDGER: GET /summaries/user/{user_id}"
  "BRAIN: GET /memory"                        -> "CHROMADB: GET /memory"
  "BRAIN: GET /memory/semantic"               -> "CHROMADB: GET /memory/semantic"
  "BRAIN: POST /memory"                       -> "BRAIN: GET /mode"
  "BRAIN: POST /memory"                       -> "CHROMADB: POST /embedding"
  "BRAIN: POST /memory"                       -> "CHROMADB: POST /memory"
  "BRAIN: DELETE /memory"                     -> "CHROMADB: GET /memory"
  "BRAIN: DELETE /memory"                     -> "CHROMADB: DELETE /memory/{memory_id}"
  "BRAIN: POST /discord/message/incoming"     -> "CONTACTS: GET /search"
  "BRAIN: POST /discord/message/incoming"     -> "PROXY: POST /discord/dm"
  "BRAIN: POST /discord/message/incoming"     -> "INTENTS: POST /intents"
  "BRAIN: POST /discord/message/incoming"     -> "LEDGER: POST /ledger/user/{user_id}/sync"
  "BRAIN: POST /discord/message/incoming"     -> "LEDGER: GET /summaries/user/{user_id}"
  "BRAIN: POST /summary/user"                 -> "CONTACTS: GET /search"
  "BRAIN: POST /summary/user"                 -> "PROXY: POST /summary/user"
  "BRAIN: POST /summary/user/combined"        -> "CONTACTS: GET /search"
  "BRAIN: POST /summary/user/combined"        -> "PROXY: POST /summary/user/combined"

  /* discord endpoint dependencies */
  "DISCORD: Main Loop" -> "CONTACTS: GET /search"
  "DISCORD: Main Loop" -> "CONTACTS: GET /contact/{contact_id}"
  "DISCORD: Main Loop" -> "CONTACTS: POST /contact"
  "DISCORD: Main Loop" -> "CONTACTS: PATCH /contact/{contact_id}"
  "DISCORD: Main Loop" -> "BRAIN: POST /discord/message/incoming"

  /* IMESSAGE endpoint dependencies */
  "IMESSAGE: POST /imessage/send" -> "BLUEBUBBLES: POST /api/v1/message/text"
  "IMESSAGE: POST /imessage/send" -> "BLUEBUBBLES: POST /api/v1/chat/new" [label="if chat does not exist"]
  "IMESSAGE: POST /imessage/recv" -> "BRAIN: POST /message/incoming"
  "IMESSAGE: POST /imessage/recv" -> "BLUEBUBBLES: POST /api/v1/message/text" [label="if BRAIN replies"]

  /* INTENTS service dependencies (calls to BRAIN) */
  "INTENTS: POST /intents" -> "BRAIN: GET /mode"
  "INTENTS: POST /intents" -> "BRAIN: POST /mode/MODE"
  "INTENTS: POST /intents" -> "BRAIN: POST /memory"
  "INTENTS: POST /intents" -> "BRAIN: DELETE /memory"

  /* LEDGER endpoint dependencies */
  "LEDGER: POST /summaries/user/{user_id}/create" -> "LEDGER: GET /ledger/user/{user_id}/messages"
  "LEDGER: POST /summaries/user/{user_id}/create" -> "BRAIN: POST /summary/user"
  "LEDGER: POST /summaries/user/{user_id}/create" -> "LEDGER: DELETE /ledger/user/{user_id}/before/{message_id}"
  "LEDGER: POST /summaries/user/{user_id}/create" -> "BRAIN: POST /summary/user/combined"

  /* PROXY endpoint dependencies */
  "PROXY: POST /from/api/completions"   -> "OLLAMA: POST /api/generate"
  "PROXY: POST /from/api/multiturn"     -> "OLLAMA: POST /api/generate"
  "PROXY: POST /from/imessage"          -> "OLLAMA: POST /api/generate"
  "PROXY: GET /api/models"              -> "OLLAMA: GET /api/tags"
  "PROXY: GET /api/models/MODEL_NAME"   -> "OLLAMA: GET /api/tags"

  /* SCHEDULER endpoint dependencies */
  "SCHEDULER: POST /jobs" -> "External: POST <external_url>" [label="when job runs"]
}

/* generate with twopi -Tsvg endpoint.dot -o endpoint.svg or neato -Tpng endpoint.dot -o endpoint.png */