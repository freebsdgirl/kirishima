digraph Microservices {
  /* Force‑directed layout: neato or sfdp are your friends */
  layout=sfdp;       /* or use sfdp for bigger graphs */
  overlap=false;      /* prevent nodes from colliding */
  splines=true;       /* smooth, curved edges */

  /* Global node styling */
  node [
    shape=box,
    style="filled,rounded",
    fillcolor=lightblue,
    fontcolor="#080537"
  ];

  /* Optional: give heavier “gravity” to high‑degree nodes */
  edge [
    weight=2         /* boost spring strength */
  ];

  /* API endpoints */
  subgraph cluster_api {
    label="API endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightyellow];
    "API: POST /completions"
    "API: POST /v1/completions"
    "API: POST /chat/completions"
    "API: POST /v1/chat/completions"
    "API: GET /models/{model_id}"
    "API: GET /v1/models/{model_id}"
    "API: GET /models"
    "API: GET /v1/models"
  }

  /* BRAIN endpoints */
  subgraph cluster_brain {
    label="BRAIN endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightgreen];
    "BRAIN: POST /notification/execute"
    "BRAIN: POST /notification"
    "BRAIN: GET /notification/{user_id}"
    "BRAIN: POST /mode/{mode}"
    "BRAIN: GET /mode"
    "BRAIN: POST /summary/create"
    "BRAIN: POST /summary/combined/monthly"
    "BRAIN: POST /summary/combined/daily"
    "BRAIN: POST /summary/combined/weekly"
    "BRAIN: POST /embedding"
    "BRAIN: POST /api/singleturn"
    "BRAIN: POST /api/multiturn"
    "BRAIN: POST /memory"
    "BRAIN: GET /memory"
    "BRAIN: GET /memory/semantic"
    "BRAIN: DELETE /memory"
    "BRAIN: POST /scheduler/callback"
    "BRAIN: POST /scheduler/job"
    "BRAIN: GET /scheduler/job"
    "BRAIN: DELETE /scheduler/job/{job_id}"
    "BRAIN: POST /imessage/incoming"
    "BRAIN: POST /discord/message/incoming"
  }

  /* CHROMADB endpoints */
  subgraph cluster_chromadb {
    label="CHROMADB endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=plum];
    "CHROMADB: POST /summary"
    "CHROMADB: GET /summary"
    "CHROMADB: DELETE /summary/{summary_id}"
    "CHROMADB: POST /embedding"
    "CHROMADB: GET /memory"
    "CHROMADB: GET /memory/id/{memory_id}"
    "CHROMADB: PUT /memory/{memory_id}"
    "CHROMADB: PATCH /memory/{memory_id}"
    "CHROMADB: GET /memory/semantic"
    "CHROMADB: POST /memory"
    "CHROMADB: DELETE /memory/{memory_id}"
  }

  /* CONTACTS endpoints */
  subgraph cluster_contacts {
    label="CONTACTS endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightcoral];
    "CONTACTS: POST /contact"
    "CONTACTS: GET /contacts"
    "CONTACTS: GET /contact/{contact_id}"
    "CONTACTS: GET /search"
    "CONTACTS: PUT /contact/{contact_id}"
    "CONTACTS: DELETE /contact/{contact_id}"
    "CONTACTS: PATCH /contact/{contact_id}"
  }

  /* DISCORD endpoints */
  subgraph cluster_discord {
    label="DISCORD endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=mediumpurple1];
    "DISCORD: POST /dm"
  }

  /* DIVOOM endpoints */
  subgraph cluster_divoom {
    label="DIVOOM endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightgoldenrod];
    "DIVOOM: POST /send"
  }

  /* IMESSAGE endpoints */
  subgraph cluster_imessage {
    label="IMESSAGE endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightcyan];
    "IMESSAGE: POST /imessage/send"
    "IMESSAGE: POST /imessage/recv"
  }

  /* LEDGER endpoints */
  subgraph cluster_ledger {
    label="LEDGER endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor="#16b3b3"];
    "LEDGER: GET /user/{user_id}/messages"
    "LEDGER: GET /active"
    "LEDGER: DELETE /user/{user_id}"
    "LEDGER: POST /ledger/user/{user_id}/sync"
  }
  
  /* PROXY endpoints */
  subgraph cluster_proxy {
    label="PROXY endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightsteelblue];
    "PROXY: POST /discord/dm"
    "PROXY: POST /imessage"
    "PROXY: POST /json"
    "PROXY: POST /queue/enqueue"
    "PROXY: GET /queue/status"
    "PROXY: GET /queue/task/{task_id}"
    "PROXY: POST /summary/user"
    "PROXY: POST /summary/user/combined"
    "PROXY: POST /api/singleturn"
    "PROXY: POST /api/multiturn"
  }

  /* SCHEDULER endpoints */
  subgraph cluster_scheduler {
    label="SCHEDULER endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightseagreen];
    "SCHEDULER: POST /jobs/{job_id}/pause"
    "SCHEDULER: POST /jobs/{job_id}/resume"
    "SCHEDULER: POST /jobs"
    "SCHEDULER: DELETE /jobs/{job_id}"
    "SCHEDULER: GET /jobs"
  }

  /* SMARTHOME endpoints */
  subgraph cluster_smarthome {
    label="SMARTHOME endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=khaki];
    "SMARTHOME: GET /populate-devices-json"
    "SMARTHOME: GET /areas"
    "SMARTHOME: GET /devices"
    "SMARTHOME: GET /area/{area}/devices"
    "SMARTHOME: GET /device/{device_id}/entities"
    "SMARTHOME: GET /entities"
    "SMARTHOME: GET /entity/{entity_id}"
    "SMARTHOME: POST /user_request"
  }

  /* STICKYNOTES endpoints */
  subgraph cluster_stickynotes {
    label="STICKYNOTES endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=peachpuff];
    "STICKYNOTES: POST /snooze/{note_id}"
    "STICKYNOTES: GET /check"
    "STICKYNOTES: GET /resolve/{note_id}"
    "STICKYNOTES: GET /list"
    "STICKYNOTES: POST /create"
  }

  /* STT_TTS CONTROLLER endpoints */
  subgraph cluster_stt_tts_controller {
    label="STT_TTS CONTROLLER endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lightpink];
    "STT_TTS: POST /tts/start"
    "STT_TTS: POST /tts/stop"
    "STT_TTS: GET /tts/status"
    "STT_TTS: POST /stt/start"
    "STT_TTS: POST /stt/stop"
    "STT_TTS: GET /stt/status"
    "STT_TTS: POST /tts/speak"
    "STT_TTS: POST /v1/audio/speech"
  }

  /* TTS endpoints */
  subgraph cluster_tts {
    label="TTS endpoints";
    style=dashed;
    color=lightgrey;
    node [style=filled, fillcolor=lavender];
    "TTS: POST /tts/speak"
    "TTS: POST /v1/audio/speech"
    "TTS: GET /v1/audio/voices"
    "TTS: GET /v1/audio/models"
  }

  /* Describe connections */
  /* API endpoint dependencies */
  "API: POST /v1/chat/completions"  -> "BRAIN: POST /message/multiturn/incoming"
  "API: POST /v1/completions"       -> "BRAIN: POST /api/singleturn"
  "API: GET /v1/models/{model_id}"  -> "BRAIN: GET /model/{model_name}"
  "API: POST /completions"          -> "API: POST /v1/completions" [label="Redirect"]
  "API: POST /chat/completions"     -> "API: POST /v1/chat/completions" [label="Redirect"]
  "API: GET /models"                -> "API: GET /v1/models" [label="Redirect"]
  "API: GET /models/{model_id}"     -> "API: GET /v1/models/{model_id}" [label="Redirect"]
  "API: POST /v1/chat/completions"  -> "API: POST /v1/completions" [label="if '### Task'"]

  /* BRAIN endpoint dependencies */
  "BRAIN: GET /models"                        -> "PROXY: GET /api/models"
  "BRAIN: GET /model/{model_name}"            -> "PROXY: GET /api/models/{model_name}"
  "BRAIN: POST /scheduler/job"                -> "SCHEDULER: POST /jobs"
  "BRAIN: GET /scheduler/job"                 -> "SCHEDULER: GET /jobs"
  "BRAIN: DELETE /scheduler/job/{job_id}"     -> "SCHEDULER: DELETE /jobs/{job_id}"
  "BRAIN: POST /message/incoming"             -> "CONTACTS: GET /search"
  "BRAIN: POST /message/incoming"             -> "CONTACTS: POST /contact" [label="if not found"]
  "BRAIN: POST /api/singleturn"               -> "PROXY: POST /from/api/completions"
  "BRAIN: POST /message/multiturn/incoming"   -> "PROXY: POST /from/api/multiturn"
  "BRAIN: POST /message/multiturn/incoming"   -> "LEDGER: POST /ledger/user/{user_id}/sync"
  "BRAIN: POST /message/multiturn/incoming"   -> "LEDGER: GET /summaries/user/{user_id}"
  "BRAIN: POST /discord/message/incoming"     -> "CONTACTS: GET /search"
  "BRAIN: POST /discord/message/incoming"     -> "PROXY: POST /discord/dm"
  "BRAIN: POST /discord/message/incoming"     -> "LEDGER: POST /ledger/user/{user_id}/sync"
  "BRAIN: POST /discord/message/incoming"     -> "LEDGER: GET /summaries/user/{user_id}"
  "BRAIN: POST /summary/user"                 -> "CONTACTS: GET /search"
  "BRAIN: POST /summary/user"                 -> "PROXY: POST /summary/user"
  "BRAIN: POST /summary/user/combined"        -> "CONTACTS: GET /search"
  "BRAIN: POST /summary/user/combined"        -> "PROXY: POST /summary/user/combined"
  "BRAIN: POST /api/multiturn"                -> "DIVOOM: POST /send"
  "BRAIN: POST /discord/message/incoming"     -> "CHROMADB: GET /summary"
  "BRAIN: POST /memory"                       -> "CHROMADB: POST /embedding"
  "BRAIN: POST /memory"                       -> "CHROMADB: POST /memory"
  "BRAIN: POST /memory"                       -> "CHROMADB: GET /memory"
  "BRAIN: POST /memory"                       -> "CHROMADB: GET /memory/semantic"
  "BRAIN: POST /memory"                       -> "CHROMADB: DELETE /memory/{memory_id}"
  "BRAIN: DELETE /memory"                     -> "CHROMADB: DELETE /memory/{memory_id}"
  "BRAIN: GET /memory"                        -> "CHROMADB: GET /memory"
  "BRAIN: GET /memory/semantic"               -> "CHROMADB: GET /memory/semantic"
  "BRAIN: POST /notification/execute"         -> "DISCORD: POST /dm"
  "BRAIN: POST /notification/execute"         -> "IMESSAGE: POST /imessage/send"
  "BRAIN: POST /notification/execute"         -> "CONTACTS: GET /contact/{user_id}"
  "BRAIN: POST /notification/execute"         -> "CHROMADB: GET /summary"
  "BRAIN: POST /scheduler/callback"           -> "SCHEDULER: POST /jobs"
  "BRAIN: POST /api/multiturn"                -> "SMARTHOME: POST /user_request"
  "BRAIN: POST /api/multiturn"                -> "STICKYNOTES: POST /snooze/{note_id}"
  "BRAIN: POST /api/multiturn"                -> "STICKYNOTES: GET /check"
  "BRAIN: POST /api/multiturn"                -> "STICKYNOTES: GET /resolve/{note_id}"
  "BRAIN: POST /api/multiturn"                -> "STICKYNOTES: GET /list"
  "BRAIN: POST /api/multiturn"                -> "STICKYNOTES: POST /create"
  "BRAIN: POST /api/multiturn"                -> "TTS: POST /tts/speak"
  "BRAIN: POST /api/multiturn"                -> "TTS: POST /v1/audio/speech"
  "BRAIN: POST /api/multiturn"                -> "DIVOOM: POST /send"
  "BRAIN: POST /summary/create"               -> "LEDGER: GET /active" [label="direct httpx.get"]
  "BRAIN: POST /summary/create"               -> "LEDGER: GET /user/{user_id}/messages" [label="direct httpx.get"]
  "BRAIN: POST /summary/create"               -> "PROXY: POST /summary/user" [label="direct httpx.post"]
  "BRAIN: POST /summary/create"               -> "PROXY: POST /summary/user/combined" [label="direct httpx.post"]
  "BRAIN: POST /summary/create"               -> "CHROMADB: POST /summary" [label="direct httpx.post"]
  "BRAIN: POST /memories/scan"                -> "CONTACTS: GET /contacts" [label="direct httpx.get"]
  "BRAIN: POST /memories/scan"                -> "LEDGER: GET /user/{user_id}/messages/untagged" [label="direct httpx.get"]
  "BRAIN: POST /memories/scan"                -> "LEDGER: GET /topics/recent" [label="direct httpx.get"]
  "BRAIN: POST /memories/scan"                -> "LEDGER: GET /topics/{topic_id}/messages" [label="direct httpx.get"]
  "BRAIN: POST /memories/scan"                -> "API: POST /v1/completions" [label="direct httpx.post"]
  "BRAIN: POST /memories/scan"                -> "LEDGER: POST /topics" [label="direct httpx.post"]
  "BRAIN: POST /memories/scan"                -> "LEDGER: PATCH /topics/{topic_id}/assign" [label="direct httpx.patch"]
  "BRAIN: POST /scheduler/job"                -> "BRAIN: POST /scheduler/callback" [label="job external_url"]

  "BRAIN: POST /api/multiturn" -> "PROXY: POST /api/multiturn" [label="via post_to_service"]
  /* discord endpoint dependencies */
  "DISCORD: Main Loop" -> "CONTACTS: GET /search"
  "DISCORD: Main Loop" -> "CONTACTS: GET /contact/{contact_id}"
  "DISCORD: Main Loop" -> "CONTACTS: POST /contact"
  "DISCORD: Main Loop" -> "CONTACTS: PATCH /contact/{contact_id}"
  "DISCORD: Main Loop" -> "BRAIN: POST /discord/message/incoming"

  /* IMESSAGE endpoint dependencies */
  "IMESSAGE: POST /imessage/send" -> "BLUEBUBBLES: POST /api/v1/message/text"
  "IMESSAGE: POST /imessage/send" -> "BLUEBUBBLES: POST /api/v1/chat/new" [label="if chat does not exist"]
  "IMESSAGE: POST /imessage/recv" -> "BRAIN: POST /message/incoming"
  "IMESSAGE: POST /imessage/recv" -> "BLUEBUBBLES: POST /api/v1/message/text" [label="if BRAIN replies"]

  /* LEDGER endpoint dependencies */
  "LEDGER: POST /summaries/user/{user_id}/create" -> "LEDGER: GET /ledger/user/{user_id}/messages"
  "LEDGER: POST /summaries/user/{user_id}/create" -> "BRAIN: POST /summary/user"
  "LEDGER: POST /summaries/user/{user_id}/create" -> "LEDGER: DELETE /ledger/user/{user_id}/before/{message_id}"
  "LEDGER: POST /summaries/user/{user_id}/create" -> "BRAIN: POST /summary/user/combined"

  /* PROXY endpoint dependencies */
  "PROXY: POST /from/api/completions"   -> "OLLAMA: POST /api/generate"
  "PROXY: POST /from/api/multiturn"     -> "OLLAMA: POST /api/generate"
  "PROXY: POST /from/imessage"          -> "OLLAMA: POST /api/generate"
  "PROXY: GET /api/models"              -> "OLLAMA: GET /api/tags"
  "PROXY: GET /api/models/MODEL_NAME"   -> "OLLAMA: GET /api/tags"

  /* SCHEDULER endpoint dependencies */
  "SCHEDULER: POST /jobs" -> "External: POST <external_url>" [label="when job runs"]
}
/* generate with twopi -Tsvg endpoint.dot -o endpoint.svg or neato -Tpng endpoint.dot -o endpoint.png */